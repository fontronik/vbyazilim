<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vb YAZILIM - Blog</title>
  <subtitle>Heavy development warning...</subtitle>
  <id>http://vbyazilim.com/</id>
  <link href="http://vbyazilim.com/"/>
  <link href="http://vbyazilim.com/feed.xml" rel="self"/>
  <updated>2019-06-02T10:30:00+03:00</updated>
  <author>
    <name>Uğur Özyılmazel</name>
  </author>
  <entry>
    <title>How much do you care to write good Django code?</title>
    <link rel="alternate" href="http://vbyazilim.com/blog/2019/06/02/how-much-do-you-care-to-write-good-django-code/"/>
    <id>http://vbyazilim.com/blog/2019/06/02/how-much-do-you-care-to-write-good-django-code/</id>
    <published>2019-06-02T10:30:00+03:00</published>
    <updated>2019-06-09T23:08:02+03:00</updated>
    <author>
      <name>Uğur Özyılmazel</name>
    </author>
    <summary type="html">&lt;p&gt;I’ve been having often conversations with fellow Djangonauts. I always ask one
little question during the talk…&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I’ve been having often conversations with fellow Djangonauts. I always ask one
little question during the talk&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Have you ever read the Django’s “Writing code” article ?&lt;/h3&gt;

&lt;p&gt;I’ve been doing Django hire interviews lately. Before I criticize or start
review the code, I always ask the &lt;strong&gt;question&lt;/strong&gt;&amp;hellip; Unfortunately, most of the
developers are unaware of that document. They don’t even know if It exists.&lt;/p&gt;

&lt;p&gt;If you navigate through the &lt;a href="https://docs.djangoproject.com/en/dev/internals/contributing/"&gt;Contributing to Django&lt;/a&gt; page, you’ll see the
&lt;a href="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/"&gt;Writing code&lt;/a&gt; section under the list items. Probably, most users never
contrive to look at the docs unless they’re planning to contribute source code.
Rules of writing Django code is already out there&amp;hellip;&lt;/p&gt;

&lt;h3&gt;Coding style&lt;/h3&gt;

&lt;p&gt;If you &lt;a href="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/"&gt;click the link&lt;/a&gt;, you’ll navigate to coding style page in Django
documentation. I’m skipping &lt;em&gt;Python style&lt;/em&gt; part since you need to know that
already!&lt;/p&gt;

&lt;h4&gt;Sorting imports&lt;/h4&gt;

&lt;p&gt;Document tells us to sort our &lt;code&gt;import&lt;/code&gt; statements with &lt;code&gt;isort&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; pip install isort
&lt;span class="nv"&gt;$ &lt;/span&gt;isort &lt;span class="nt"&gt;-rc&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More detailed information can ben found &lt;a href="https://isort.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;. You can also integrate
this with your code editing tool/ide etc. I mostly use this configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[settings]&lt;/span&gt;
&lt;span class="py"&gt;line_length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="py"&gt;multi_line_output&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="py"&gt;use_parentheses&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;include_trailing_comma&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;quiet&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;force_grid_wrap&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="py"&gt;known_django&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;django&lt;/span&gt;
&lt;span class="py"&gt;sections&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;FUTURE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;STDLIB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;DJANGO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;THIRDPARTY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;FIRSTPARTY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;LOCALFOLDER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Small example after sort process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.deletion&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Collector&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ugettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;post_undelete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pre_undelete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you integrate &lt;code&gt;isort&lt;/code&gt; to your editor or maybe a git-hook, you don’t need
to worry about the order of imports anymore&amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;AbstractBaseUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;BaseUserManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;PermissionsMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ugettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;baseapp.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;save_file&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;custom_save_file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, sorting imports are explained very well in the Django docs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c"&gt;# future&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="c"&gt;# standard library&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;

&lt;span class="c"&gt;# third-party&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bcrypt&lt;/span&gt;

&lt;span class="c"&gt;# Django&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseNotAllowed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StreamingHttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# local Django&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LogEntry&lt;/span&gt;

&lt;span class="c"&gt;# try/except&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;CONSTANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'foo'&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;What about models ?&lt;/h4&gt;

&lt;p&gt;Django model, represents a table in database and single entity of data. That’s
why model name should be &lt;strong&gt;singular&lt;/strong&gt;, not plural! If you want to store blog
posts in a database, you must name It to &lt;code&gt;Post&lt;/code&gt; not &lt;del&gt;&lt;code&gt;Posts&lt;/code&gt;&lt;/del&gt;. Also, model name
is a Python Class. You must follow the naming convention of Python which is
&lt;code&gt;InitialCaps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Field names should be singular except &lt;code&gt;ManyToMany&lt;/code&gt; or similar field types. Naming
should be &lt;code&gt;snake_case&lt;/code&gt;. There are good examples, &lt;strong&gt;DO&lt;/strong&gt;es, &lt;strong&gt;DON’T&lt;/strong&gt;s in the
docs page. Here is a good one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ve seen two most common behavior about relation models such as &lt;code&gt;ForeignKey&lt;/code&gt;
and &lt;code&gt;MonyToMany&lt;/code&gt; fields.&lt;/p&gt;

&lt;h3&gt;Please use &lt;code&gt;to=&amp;#39;ModelName&amp;#39;&lt;/code&gt; convention&lt;/h3&gt;

&lt;p&gt;Fields takes &lt;code&gt;kwargs&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt;. Most of the candidates did the same writing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ugettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please define relation fields with using &lt;code&gt;to&lt;/code&gt; keyword argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ugettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Category'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This helps in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You are safe from &lt;strong&gt;circular import&lt;/strong&gt; situation. You are free to import any
model in anywhere&amp;hellip;&lt;/li&gt;
&lt;li&gt;This is more pythonic and readable&amp;hellip; We define all others such as
&lt;code&gt;on_delete&lt;/code&gt;, &lt;code&gt;related_name&lt;/code&gt; why not showing which model is targeted ?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;The order of model inner classes&lt;/h3&gt;

&lt;p&gt;Django docs tell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All database fields&lt;/li&gt;
&lt;li&gt;Custom manager attributes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class Meta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def __str__()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def save()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def get_absolute_url()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Any custom methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please follow the convention. Again, &lt;strong&gt;you are not writing&lt;/strong&gt; code to contribute
Django. You are writing code for your self, your company, your family, your
anything&amp;hellip; If there are some conventions, let’s follow them&amp;hellip; Why ?&lt;/p&gt;

&lt;h2&gt;Convention over configuration&lt;/h2&gt;

&lt;p&gt;I heard this term for the first time from &lt;a href="https://rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt; community. Let’s
keep the conventions also in &lt;code&gt;choices&lt;/code&gt; fields too:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If choices is defined for a given model field, define each choice as a list of
tuples, with an all-uppercase name as a class attribute on the model&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ugettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_OFFLINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_ONLINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_DELETED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_DRAFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STATUS_OFFLINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Offline'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STATUS_ONLINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Online'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STATUS_DELETED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Deleted'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STATUS_DRAFT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Draft'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;p&gt;Document also covers;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Template style&lt;/li&gt;
&lt;li&gt;View style&lt;/li&gt;
&lt;li&gt;Use of &lt;code&gt;django.conf.settings&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and few other miscellaneous information, &lt;a href="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/"&gt;please read&lt;/a&gt; It when you need It.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>hello world</title>
    <link rel="alternate" href="http://vbyazilim.com/blog/2019/06/01/hello-world/"/>
    <id>http://vbyazilim.com/blog/2019/06/01/hello-world/</id>
    <published>2019-06-01T10:00:00+03:00</published>
    <updated>2019-06-09T16:58:14+03:00</updated>
    <author>
      <name>Uğur Özyılmazel</name>
    </author>
    <summary type="html">&lt;p&gt;Hello and welcome to our &lt;strong&gt;first&lt;/strong&gt; official blog post!
&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Hello and welcome to our &lt;strong&gt;first&lt;/strong&gt; official blog post!
&lt;/p&gt;

&lt;div class="zoomable "&gt;&lt;figure class="image"&gt;&lt;img class="mini-zoom" src="/public/images/posts/2019-06-01-vbyazilim.jpg" alt="Image" /&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;I’m Uğur “vigo” Özyılmazel and I’m a software developer and founder of &lt;strong&gt;vb
YAZILIM&lt;/strong&gt;. I’ve been writing code since the early 8-bit computer days.
I have a long running career for a 47 y/o developer. I’ve spend my last ~18
years with building web applications. Some of them were heavy, some of them
were super easy&amp;hellip; At the end of day, they were all html outputted web sites.&lt;/p&gt;

&lt;p&gt;I learned a lot while building sites, apps and related things such as
operating systems, databases, saas platforms and more&amp;hellip; My journey started
with 6502 Assembly language&amp;hellip; Yes, &lt;strong&gt;Commodore 64&lt;/strong&gt; my first true &lt;span class="icon"&gt;&lt;i class="fas fa-heart"&gt;&lt;/i&gt;&lt;/span&gt;.
Then 68000 Assembly language for coding demos, intros and games for &lt;strong&gt;AmigA&lt;/strong&gt;&amp;hellip;
I’m still using those awesome machines and there are still tons of new releases!&lt;/p&gt;

&lt;h3&gt;Django&lt;/h3&gt;

&lt;p&gt;My curse, my gift&amp;hellip; I’ve been building Django applications since 2008. I remember
the version I met &lt;code&gt;Django==0.96&lt;/code&gt;. I witnessed the evolution of Django over the
years. It’s free and open source Python web-framework for everybody! I made
many web apps with PHP back-in days. First time I saw the Django Admin panel
and I crashed! I guess, that’s the most exciting feature! and very attractive&amp;hellip;&lt;/p&gt;

&lt;p&gt;I made couple hundred web apps with Django over the years. I was working in a
University and I injected Python to our team. Sometimes small-mini web sites,
sometimes huge, heavy apps&amp;hellip; All done with Django&amp;hellip;&lt;/p&gt;

&lt;h3&gt;Polyglot&lt;/h3&gt;

&lt;p&gt;I heard this term from &lt;a href="https://www.kennethreitz.org"&gt;Kenneth Reitz&lt;/a&gt;. He was Python overlord at &lt;a href="https://heroku.com"&gt;Heroku&lt;/a&gt;
back in 2013. Yes, I’m also a polyglot programmer. This means, I know few other
programming languages too. I use Python, Ruby, Bash, AppleScript, sometimes
JavaScript (&lt;em&gt;not fan of It&lt;/em&gt;) and little bit of Golang in my daily routine.&lt;/p&gt;

&lt;p&gt;I’m very enthusiastic about learning new languages such as Swift, Rust.
Due to my oldskool background, I’ve never had a chance to code in compiled
languages such as C, C++. After Assembly, I’ve jumped straight to run-time,
script-ish languages such as ASP 3.0 (old, classic), PHP, Perl&amp;hellip;&lt;/p&gt;

&lt;p&gt;I meet Ruby in 2011 and that that was another ground breaking thing for me.
Blending my Python knowledge with Ruby opened my mind&amp;hellip; I followed the
pioneers of the industry. How they write code ? What are their best practices ?
Yes, conventions are always over the configurations!&lt;/p&gt;

&lt;h3&gt;What about vb YAZILIM ?&lt;/h3&gt;

&lt;p&gt;Founded in late 2013. Mostly known from smashing hit conferences between 2013
- 2015. We tried to help and support open-source related movements and
activities. We were two times sponsor of &lt;a href="http://railsgirls.com/"&gt;Rails Girls&lt;/a&gt; Istanbul and Ankara,
&lt;a href="https://ozgurwebgunleri.org.tr/2013/"&gt;Özgür Web Teknolojileri Günleri&lt;/a&gt; 2013, Rails Girls Summer of Code 2014,
&lt;a href="https://www.meetup.com/jstanbul/"&gt;Jstanbul Meetup&lt;/a&gt; and &lt;a href="https://www.meetup.com/IstanbulPHP/"&gt;PHP İstanbul&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Highly focused on heavy Django application development and weekend
training sessions. It’s been six years and finally I’ve managed to find
enough time to re-design, re-build my humble company website.&lt;/p&gt;

&lt;p&gt;I’ll publish mostly development related articles, examples, reviews and
same sort of topics here in my company website.&lt;/p&gt;

&lt;p&gt;Keep following &lt;strong&gt;vb YAZILIM&lt;/strong&gt;, get in touch !&lt;/p&gt;
</content>
  </entry>
</feed>
